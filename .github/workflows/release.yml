name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          git fetch --tags
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" HEAD)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" ${LAST_TAG}..HEAD)
          fi

          # Create release body
          echo "BODY<<EOF" >> $GITHUB_OUTPUT
          echo "## 🎉 Gramr v${{ steps.get_version.outputs.version }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "The legendary sword that forges smart contracts!" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### ✨ Features" >> $GITHUB_OUTPUT
          echo "- ⚡ Lightning Fast CLI - Generate complete contracts in seconds" >> $GITHUB_OUTPUT
          echo "- 🧙‍♂️ Interactive Wizard - Wotan guides you through contract creation" >> $GITHUB_OUTPUT
          echo "- 🛡️ OpenZeppelin Powered - Uses official templates and best practices" >> $GITHUB_OUTPUT
          echo "- 🔄 Multi-Language - Solidity (Foundry) and Rust (Arbitrum Stylus)" >> $GITHUB_OUTPUT
          echo "- 🎛️ Rich Extensions - Burnable, pausable, votes, upgradeable, and more" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 📦 Installation" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```bash' >> $GITHUB_OUTPUT
          echo 'curl --proto "=https" --tlsv1.2 -sSf https://getgramr.pxlvre.dev/install.sh | sh' >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 🚀 Quick Start" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```bash' >> $GITHUB_OUTPUT
          echo '# Interactive wizard' >> $GITHUB_OUTPUT
          echo 'wotan' >> $GITHUB_OUTPUT
          echo '' >> $GITHUB_OUTPUT
          echo '# Direct CLI' >> $GITHUB_OUTPUT
          echo 'gramr new contract MyToken --solidity --oz-erc20 --extensions burnable,pausable' >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 📚 Documentation" >> $GITHUB_OUTPUT
          echo "- [Documentation](https://getgramr.pxlvre.dev/docs)" >> $GITHUB_OUTPUT
          echo "- [Library on crates.io](https://crates.io/crates/gramr)" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 📋 What's Changed" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          body: ${{ steps.changelog.outputs.BODY }}
          draft: false
          prerelease: false

  build-binaries:
    name: Build Binaries
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: gramr-linux-amd64
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: gramr-darwin-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: gramr-darwin-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build binaries
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package binaries
        run: |
          mkdir -p package
          cp target/${{ matrix.target }}/release/gramr package/
          cp target/${{ matrix.target }}/release/wotan package/
          cp target/${{ matrix.target }}/release/gramrup package/
          tar -czf ${{ matrix.asset_name }}.tar.gz -C package .

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.create-release.outputs.version }}
          files: ${{ matrix.asset_name }}.tar.gz

  publish-crates:
    name: Publish to crates.io
    needs: create-release
    runs-on: ubuntu-latest
    if: needs.create-release.result == 'success'
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Login to crates.io
        run: cargo login ${{ secrets.CRATES_TOKEN }}

      - name: Publish gramr library
        run: |
          cd lib
          cargo publish --allow-dirty
        continue-on-error: true # In case version already exists